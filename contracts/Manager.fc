#include "imports/stdlib.fc";

;; ---------------------------------------------------------------------
;; OP CODES
;; ---------------------------------------------------------------------
const op::setTokens = "op::setTokens"c;
const op::deposit   = "op::deposit"c;
const op::withdraw  = "op::withdraw"c;
const op::setTreasury = "op::setTreasury"c;
const op::setAsset = "op::setAsset"c;

;; ---------------------------------------------------------------------
;; GLOBAL STORAGE
;; - g_adminPubkey: 256 bits
;; - g_sToken: 256 bits (Address)
;; - g_yToken: 256 bits (Address)
;; - g_treasury: 256 bits (Address)
;; - g_isVault: 1 bit
;; ---------------------------------------------------------------------
global int g_adminPubkey;
global slice g_sToken;
global slice g_yToken;
global slice g_treasury;
global int g_isVault;
global cell g_assets;  
const int ADDRESS_SIZE = 257; ;; 256 address + 1 bit


(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";


;; ---------------------------------------------------------------------
;; LOAD & SAVE DATA
;; ---------------------------------------------------------------------
() load_data() impure {
    slice ds = get_data().begin_parse();
    g_adminPubkey = ds~load_uint(256);
    g_sToken = ds~load_msg_addr();
    g_yToken = ds~load_msg_addr();
    
    ;; Load reference cell
    slice ref_slice = ds~load_ref().begin_parse();
    g_treasury = ref_slice~load_msg_addr();
    g_isVault = ref_slice~load_uint(1);
    g_assets = ref_slice~load_dict();
    
    ds.end_parse();
}



() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(g_adminPubkey, 256)  ;; 256 bits for adminPubkey
            .store_slice(g_sToken)      ;; 256 bits for sToken (Address)
            .store_slice(g_yToken)      ;; 256 bits for yToken (Address)
            .store_ref(                      ;; Reference to another cell
                begin_cell()
                    .store_slice(g_treasury)  ;; 256 bits for treasury (Address)
                    .store_uint(g_isVault, 1)      ;; 1 bit for isVault
                    .store_dict(g_assets)
                .end_cell()
            )
        .end_cell()
    );
}



;; ---------------------------------------------------------------------
;; SIGNATURE VALIDATION USING CHKSIGNU
;; ---------------------------------------------------------------------
() _validateSignature(slice in_msg_body) impure {
    ;; Ensure enough bits for a signature (512 bits for the signature)
    if (slice_bits(in_msg_body) < 512) {
        throw(0xfffd); ;; not enough bits for signature
    }

    ;; Extract the signature (512 bits)
    slice root_signature = in_msg_body~load_bits(512);

    ;; Compute the hash of the remaining message body
    int root_hash = slice_hash(in_msg_body);

    ;; Validate the signature using the stored public key
    if (check_signature(root_hash, root_signature, g_adminPubkey) == 0) {
        throw(0xfffe); ;; invalid signature
    }
}



;; ---------------------------------------------------------------------
;; HANDLERS
;; ---------------------------------------------------------------------
() handle_setTokens(slice in_msg_body) impure {
    ;; Validate signature before proceeding
    _validateSignature(in_msg_body);

    ;; Load the reference cell containing the new addresses
    cell ref = in_msg_body~load_ref();
    slice rs = ref.begin_parse();
    g_sToken = rs~load_msg_addr();
    g_yToken = rs~load_msg_addr();
    g_isVault = rs~load_uint(1);

    save_data();
    accept_message();
}


() handle_deposit(slice in_msg_body) impure {
    ;; Validate signature if needed
    _validateSignature(in_msg_body);

    var depositAmount = in_msg_body~load_uint(32);
    ;; Handle deposit logic
    accept_message();
}

() handle_withdraw(slice in_msg_body) impure {
    ;; Validate signature if needed
    _validateSignature(in_msg_body);

    var withdrawAmount = in_msg_body~load_uint(32);
    ;; Handle withdraw logic
    accept_message();
}

() handle_setTreasury(slice in_msg_body) impure {
    ;; Validate signature if needed
    _validateSignature(in_msg_body);

    ;; Load the reference cell containing the new addresses
    g_treasury = in_msg_body~load_msg_addr();
    save_data();
    accept_message();
}

;; ---------------------------------------------------------------------
;; ASSET MANAGEMENT
;; ---------------------------------------------------------------------

() handle_setAsset(slice in_msg_body) impure {
    ;; Validate signature
    _validateSignature(in_msg_body);

    ;; Load asset address and status
    slice asset_address = in_msg_body~load_msg_addr();
    int status = in_msg_body~load_uint(1);

    ;; Update asset status in dictionary with addr as key and status as slice
    g_assets~dict_set(ADDRESS_SIZE, asset_address, begin_cell().store_uint(status, 1).end_cell().begin_parse());
    save_data();
    accept_message();
}


;; ---------------------------------------------------------------------
;; MAIN ENTRY POINT
;; ---------------------------------------------------------------------
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; Bounced message, ignore
        return ();
    }

    load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64); ;; Not used but read for convention

    if (op == op::setTokens) {
        handle_setTokens(in_msg_body);
        return ();
    }
    elseif (op == op::deposit) {
        handle_deposit(in_msg_body);
        return ();
    }
    elseif (op == op::withdraw) {
        handle_withdraw(in_msg_body);
        return ();
    }
    elseif (op == op::setTreasury) {
        handle_setTreasury(in_msg_body);
        return ();
    }
    if (op == op::setAsset) {
        handle_setAsset(in_msg_body);
        return ();
    }

    throw(0xffff); ;; Unknown operation
}

;; ---------------------------------------------------------------------
;; GET METHODS
;; ---------------------------------------------------------------------
(slice) get_stoken() method_id {
    load_data();
    return g_sToken;
}

(slice) get_ytoken() method_id {
    load_data();
    return g_yToken;
}

(slice) get_treasury() method_id {
    load_data();
    return g_treasury;
}

int get_is_vault() method_id {
    load_data();
    return g_isVault;
}

int get_admin_pubkey() method_id {
    load_data();
    return g_adminPubkey;
}

;; Get method to check if asset is enabled
(int) is_asset_enabled(slice asset_address) method_id {
    load_data();
    (slice status_slice, int found) = g_assets.dict_get?(ADDRESS_SIZE, asset_address);
    if (found == -1) {
        ;; Asset found, extract status
        int status = status_slice~load_uint(1);
        return status;
    } else {
        ;; Asset not found, default to 0 (false)
        return 0;
    }
}
