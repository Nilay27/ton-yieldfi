#include "imports/stdlib.fc";

;; ---------------------------------------------------------------------
;; Define opcodes from string constants (like in Counter)
;; ---------------------------------------------------------------------
const op::setTokens = "op::setTokens"c;
const op::deposit   = "op::deposit"c;
const op::withdraw  = "op::withdraw"c;

;; ---------------------------------------------------------------------
;; Global storage
;; We'll store only small fields to avoid cell overflow, or
;; if you prefer storing 256-bit fields, you'd do a second reference cell.
;; For simplicity, we store small integers as an example:
;;   g_sToken: 32 bits
;;   g_isVault: 1 bit
;; ---------------------------------------------------------------------
global int g_sToken;
global int g_isVault;

;; ---------------------------------------------------------------------
;; load_data & save_data (like Counter)
;; ---------------------------------------------------------------------
() load_data() impure {
    var ds = get_data().begin_parse();
    g_sToken  = ds~load_uint(32);
    g_isVault = ds~load_uint(1);
    ds.end_parse();
}

() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(g_sToken, 32)
            .store_uint(g_isVault, 1)
            .end_cell()
    );
}

;; ---------------------------------------------------------------------
;; Handlers for each opcode
;; ---------------------------------------------------------------------
() handle_setTokens(slice in_msg_body) impure {
    ;; parse new sToken (32 bits) and newIsVault (1 bit) just for example
    var newSToken  = in_msg_body~load_uint(32);
    var newIsVault = in_msg_body~load_uint(1);

    g_sToken = newSToken;
    g_isVault = newIsVault;

    save_data();
    ;; accept_message();
}

() handle_deposit(slice in_msg_body) impure {
    var depositAmount = in_msg_body~load_uint(32);
    ;; do deposit logic, simplified
    ;;accept_message();
}

() handle_withdraw(slice in_msg_body) impure {
    var withdrawAmount = in_msg_body~load_uint(32);
    ;; do withdraw logic, simplified
    ;; accept_message();
}

;; ---------------------------------------------------------------------
;; recv_internal: no "else if", each opcode is a separate if
;; ---------------------------------------------------------------------
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; bounced, ignore
        return ();
    }

    load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64); ;; not used, but read for pattern

    if (op == op::setTokens) {
        handle_setTokens(in_msg_body);
        return ();
    }
    if (op == op::deposit) {
        handle_deposit(in_msg_body);
        return ();
    }
    if (op == op::withdraw) {
        handle_withdraw(in_msg_body);
        return ();
    }

    throw(0xffff);
}

;; ---------------------------------------------------------------------
;; Get methods (like get_counter & get_id)
;; ---------------------------------------------------------------------
int get_stoken() method_id {
    load_data();
    return g_sToken;
}

int get_is_vault() method_id {
    load_data();
    return g_isVault;
}
